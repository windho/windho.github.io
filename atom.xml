<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://windho.github.io</id>
    <title>Wind</title>
    <updated>2021-11-26T03:07:53.438Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://windho.github.io"/>
    <link rel="self" href="https://windho.github.io/atom.xml"/>
    <subtitle>Say yes to life.</subtitle>
    <logo>https://windho.github.io/images/avatar.png</logo>
    <icon>https://windho.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Wind</rights>
    <entry>
        <title type="html"><![CDATA[抽卡游戏Python实现]]></title>
        <id>https://windho.github.io/post/chou-qia-you-xi-yi-ci-zuo-ye/</id>
        <link href="https://windho.github.io/post/chou-qia-you-xi-yi-ci-zuo-ye/">
        </link>
        <updated>2021-11-26T02:34:55.000Z</updated>
        <content type="html"><![CDATA[<p>余岩老师生物编程课程考核的一个小作业：</p>
<blockquote>
<p>编写一个抽卡游戏。在抽卡游戏中，N, R, SR, SSR 四种类别的卡的稀有程度依次提高，其抽取的概率分别为0.725，0.25，0.02，0.005，依照概率随机抽取。初始有998金，每次抽卡花费100金，显示本次抽到的卡，抽卡结果统计（每种卡抽到多少张）以及剩余的金币，如果剩下的金币不够一次抽取，则提示用户充值，如果用户充值为空则退出游戏。退出时将抽卡结果统计（每种卡抽到多少张）以及剩余的金币数保存到文件中，下次运行时读取之前保存的结果，继续进行抽卡和统计。</p>
</blockquote>
<p>可以看到，代码要实现的功能主要有：</p>
<ul>
<li>抽卡系统：根据概率随机抽卡</li>
<li>金币系统：每次抽卡消耗一定金币，金币不足以抽卡时提示充值
<ul>
<li>为空结束程序</li>
<li>为正整数值继续抽卡（我自己设定的只能是正整数）</li>
</ul>
</li>
<li>存档系统：要求保存抽卡结果和金币数</li>
</ul>
<h1 id="代码实现python">代码实现（python）</h1>
<pre><code>{
  '''
Version: 2.0
Autor: Wind Ho
Date: 2021-11-24 22:42:35
LastEditors: Wind Ho
LastEditTime: 2021-11-24 23:36:52
'''

import random

#抽卡游戏（原神版）

#初始化
money = 998
item_n=[&quot;岩王帝君&quot;,&quot;卢锅巴&quot;,&quot;达达丽鸭&quot;,&quot;荒泷一抖&quot;]
item_r=[&quot;刻晴小姐&quot;,&quot;雷电将军&quot;,&quot;古恩希尔德家的琴小姐&quot;,&quot;凝光小姐&quot;]
item_sr=[&quot;安德留斯&quot;,&quot;奥罗巴斯&quot;,&quot;巴巴托斯&quot;,&quot;巴尔泽布&quot;]
item_ssr=[&quot;萍姥姥&quot;,&quot;流云借风真君牌高压锅&quot;,&quot;锅巴&quot;,&quot;椒盐史莱姆&quot;]
prob=[0.725,0.25,0.02,0.005]
charge = 0
times_total=[]
times_n=[]
times_r=[]
times_sr=[]
times_ssr=[]

#定义一个抽卡函数
def kacha(x):
    if x&lt;prob[3]:
        print(&quot;一道金光直冲云霄，你获得了&quot;,random.choice(item_ssr),&quot;，已经没有什么能阻拦你了!江山老婆我都要!&quot;,sep=&quot;&quot;)
        times_ssr.append(1)
    elif x&lt;prob[3]+prob[2]:
        print(&quot;一道紫光直冲云霄，你获得了&quot;,random.choice(item_sr),&quot;，应该值不少钱，卖了抽老婆。&quot;,sep=&quot;&quot;)
        times_sr.append(1)
    elif x&lt;prob[3]+prob[2]+prob[1]:
        print(&quot;一道闪电直冲云霄，你获得了&quot;,random.choice(item_r),&quot;，老婆又多了一个&quot;,sep=&quot;&quot;)
        times_r.append(1)
    else:
        print(&quot;你看了眼从天而降的&quot;,random.choice(item_n),&quot;，把他扔到了垃圾桶。&quot;,sep=&quot;&quot;)
        times_n.append(1)

print(&quot;旅行者，欢迎来到提瓦特大陆！听从命运的召唤吧！\n 当前余额：&quot;, money,&quot;；抽卡总次数:&quot;,len(times_total),&quot;其中ssr:&quot;,len(times_ssr),&quot;次，sr:&quot;,len(times_sr),&quot;次，r:&quot;,len(times_r),&quot;次，n:&quot;,len(times_n),&quot;次。&quot;)

#金币系统和抽卡函数组合
while True: 
    if money&gt;=100: 
        print(&quot;=&quot;*70)
        b = input(&quot;你砸锅卖铁，终于凑够了原石。怀着美好的憧憬祈愿，天空闪过一道璀璨的光芒……&quot;)
        chance=random.random()
        kacha(chance)
        money -=100 
        times_total.append(1)
        print(&quot;当前余额：&quot;, money,&quot;；抽卡总次数:&quot;,len(times_total),&quot;其中ssr:&quot;,len(times_ssr),&quot;次，sr:&quot;,len(times_sr),&quot;次，r:&quot;,len(times_r),&quot;次，n:&quot;,len(times_n),&quot;次。&quot;)
    else:
        charge = input(&quot;当前余额已不足以进行一次抽卡，为了老婆，再氪点儿吧：&quot;)
        if len(charge)!=0:
            try: #try函数来对输入值进行判断，为整数正常充值，为非整数或字符串重新输入，为空结束（其实if也行）
                charge = int(charge)
            except(ValueError):
                print(&quot;旅行者，请输入整数！&quot;)
            else:
                money = money + charge
        else:
            print(&quot;抽卡结束，下次一定出货&quot;)
            break
    
#抽卡数据存档
list_kacha = [money, len(times_total),len(times_ssr),len(times_sr),len(times_r),len(times_n)]
f = open (&quot;kacha.txt&quot;,&quot;w+&quot;)  #创建一个kacha文档，向其中覆盖数据
f.write(&quot;,&quot;.join(str(i) for i in list_kacha))
f.close()

#存档显示
'''
f = open (&quot;kacha.txt&quot;,&quot;r&quot;)
print(f.read())
'''
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea+Github Pages搭建个人主页（2021.11）]]></title>
        <id>https://windho.github.io/post/grideagithub-pages-da-jian-ge-ren-zhu-ye-202111/</id>
        <link href="https://windho.github.io/post/grideagithub-pages-da-jian-ge-ren-zhu-ye-202111/">
        </link>
        <updated>2021-11-24T08:24:44.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gridea的安装">Gridea的安装</h2>
<ul>
<li>安装地址：<a href="https://gridea.dev/#started">Gridea</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea+GitHub Pages：无法同步的问题]]></title>
        <id>https://windho.github.io/post/grideagithub-pageswu-fa-tong-bu-de-wen-ti/</id>
        <link href="https://windho.github.io/post/grideagithub-pageswu-fa-tong-bu-de-wen-ti/">
        </link>
        <updated>2021-11-24T06:08:25.000Z</updated>
        <content type="html"><![CDATA[<p>在发现Gridea之前，我尝试了好几种个人博客搭建策略：Hexo+Github Pages，wordpress+腾讯云服务器……<br>
均以失败告终。<br>
首先在服务器方面，GitHub由于众所周知的原因在国内访问速度极慢乃至无法访问。而国内服务器，虽然稳定且对国内访问友好，但成本较为高昂，且需要备案等繁琐步骤。<br>
所以我在兜了一大圈，从Github Pages到购买了腾讯云的学生服务器，再到Coding Pages，最终回到了首选。<br>
而在博客框架的选择上，则有更多选项：Hexo、Hugo、wordpress、jekyll等。但无一例外，这几个框架的部署都需要Node.js、Git的支撑，对于没有cmd操作经验的新手来说，极易踩坑，而且流程较长。<br>
我在首次尝试Hexo部署到Github Pages的时候，按照教程一步一步来，不停掉坑。好在有一定的计算机知识，勉强能意识到错误在哪里。但最终仍卡在了 hexo d这一步。原因是网络问题，尝试了google到的各种方法都未能解决。<br>
最后选择了Gridea来部署Github Pages，这也成了我目前唯一成功的方法。</p>
<h2 id="gridea">Gridea</h2>
<p>Gridea的图形化操作界面对新手极为友好，没有复杂的cmd命令操作和各种配置，几步就可完成部署。后端页面也简洁美观。<br>
不过最终仍出现一个问题，无法同步。即便是挂了梯子，却无法对Gridea进行代理。<br>
所以这边参考了一个大佬的解决方法，利用Github Desktop来曲线救国。<br>
……</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Test]]></title>
        <id>https://windho.github.io/post/test/</id>
        <link href="https://windho.github.io/post/test/">
        </link>
        <updated>2021-11-24T05:55:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="hi-there-this-is-a-test-for-my-first-blog-page">Hi there! This is a test for my first blog page.</h1>
<h2 id="trying-markdown">Trying markdown</h2>
<hr>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.89883em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-2.904999em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord text"><span class="mord textrm sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.46782999999999997em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord text"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span>!</p>
<p><em>2222</em></p>
]]></content>
    </entry>
</feed>